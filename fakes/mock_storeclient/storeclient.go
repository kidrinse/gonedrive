// Code generated by MockGen. DO NOT EDIT.
// Source: service/storeClient.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	browser "github.com/langered/gonedrive/browser"
	httpclient "github.com/langered/gonedrive/httpclient"
	reflect "reflect"
)

// MockStoreClient is a mock of StoreClient interface
type MockStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreClientMockRecorder
}

// MockStoreClientMockRecorder is the mock recorder for MockStoreClient
type MockStoreClientMockRecorder struct {
	mock *MockStoreClient
}

// NewMockStoreClient creates a new mock instance
func NewMockStoreClient(ctrl *gomock.Controller) *MockStoreClient {
	mock := &MockStoreClient{ctrl: ctrl}
	mock.recorder = &MockStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreClient) EXPECT() *MockStoreClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStoreClient) Get(httpClient httpclient.HttpClient, accessToken, remotePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", httpClient, accessToken, remotePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreClientMockRecorder) Get(httpClient, accessToken, remotePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreClient)(nil).Get), httpClient, accessToken, remotePath)
}

// Upload mocks base method
func (m *MockStoreClient) Upload(httpClient httpclient.HttpClient, accessToken, remoteFilePath, content string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", httpClient, accessToken, remoteFilePath, content)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockStoreClientMockRecorder) Upload(httpClient, accessToken, remoteFilePath, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockStoreClient)(nil).Upload), httpClient, accessToken, remoteFilePath, content)
}

// Login mocks base method
func (m *MockStoreClient) Login(httpClient httpclient.HttpClient, browser browser.Browser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", httpClient, browser)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockStoreClientMockRecorder) Login(httpClient, browser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockStoreClient)(nil).Login), httpClient, browser)
}

// List mocks base method
func (m *MockStoreClient) List(httpClient httpclient.HttpClient, accessToken, remotePath string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", httpClient, accessToken, remotePath)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoreClientMockRecorder) List(httpClient, accessToken, remotePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStoreClient)(nil).List), httpClient, accessToken, remotePath)
}

// Delete mocks base method
func (m *MockStoreClient) Delete(httpClient httpclient.HttpClient, accessToken, remotePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", httpClient, accessToken, remotePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStoreClientMockRecorder) Delete(httpClient, accessToken, remotePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStoreClient)(nil).Delete), httpClient, accessToken, remotePath)
}
